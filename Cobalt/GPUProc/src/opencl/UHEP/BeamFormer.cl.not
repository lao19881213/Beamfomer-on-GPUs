#if NR_BITS_PER_SAMPLE == 8
typedef char2 SampleType;
#else
typedef short2 SampleType;
#endif

#if NR_STATIONS > 48
#error unsupported number of stations (max = 48)
#endif


typedef __global float2 (*ComplexVoltagesType)[NR_SUBBANDS][NR_TIMES_PER_BLOCK + NR_STATION_FILTER_TAPS - 1][NR_TABS][NR_POLARIZATIONS];
typedef __global SampleType (*SamplesType)[NR_STATIONS][NR_SUBBANDS][NR_TIMES_PER_BLOCK + NR_STATION_FILTER_TAPS - 1][NR_POLARIZATIONS];
typedef __global float (*WeightsType)[NR_STATIONS][NR_SUBBANDS][NR_TABS][2];


__kernel void complexVoltages(__global void *complexVoltagesPtr,
                              __global const void *samplesPtr,
                              __global const void *weightsPtr)
{
  ComplexVoltagesType complexVoltages = (ComplexVoltagesType) complexVoltagesPtr;
  SamplesType samples = (SamplesType) samplesPtr;
  WeightsType weights = (WeightsType) weightsPtr;

  uint ri = get_local_id(0) & 1;
  uint pol = get_local_id(0) >> 1;
  uint tab = get_local_id(1);
  uint subband = get_global_id(2);

  float2 sample;
  __local float2 local_samples[NR_STATIONS][8][NR_POLARIZATIONS];
#if 0
  __local float2 local_tmp[NR_TABS][NR_POLARIZATIONS];
#endif

#if NR_STATIONS >= 1
  float weight_00 = (*weights)[ 0][subband][tab][ri];
#endif
#if NR_STATIONS >= 2
  float weight_01 = (*weights)[ 1][subband][tab][ri];
#endif
#if NR_STATIONS >= 3
  float weight_02 = (*weights)[ 2][subband][tab][ri];
#endif
#if NR_STATIONS >= 4
  float weight_03 = (*weights)[ 3][subband][tab][ri];
#endif
#if NR_STATIONS >= 5
  float weight_04 = (*weights)[ 4][subband][tab][ri];
#endif
#if NR_STATIONS >= 6
  float weight_05 = (*weights)[ 5][subband][tab][ri];
#endif
#if NR_STATIONS >= 7
  float weight_06 = (*weights)[ 6][subband][tab][ri];
#endif
#if NR_STATIONS >= 8
  float weight_07 = (*weights)[ 7][subband][tab][ri];
#endif
#if NR_STATIONS >= 9
  float weight_08 = (*weights)[ 8][subband][tab][ri];
#endif
#if NR_STATIONS >= 10
  float weight_09 = (*weights)[ 9][subband][tab][ri];
#endif
#if NR_STATIONS >= 11
  float weight_10 = (*weights)[10][subband][tab][ri];
#endif
#if NR_STATIONS >= 12
  float weight_11 = (*weights)[11][subband][tab][ri];
#endif
#if NR_STATIONS >= 13
  float weight_12 = (*weights)[12][subband][tab][ri];
#endif
#if NR_STATIONS >= 14
  float weight_13 = (*weights)[13][subband][tab][ri];
#endif
#if NR_STATIONS >= 15
  float weight_14 = (*weights)[14][subband][tab][ri];
#endif
#if NR_STATIONS >= 16
  float weight_15 = (*weights)[15][subband][tab][ri];
#endif
#if NR_STATIONS >= 17
  float weight_16 = (*weights)[16][subband][tab][ri];
#endif
#if NR_STATIONS >= 18
  float weight_17 = (*weights)[17][subband][tab][ri];
#endif
#if NR_STATIONS >= 19
  float weight_18 = (*weights)[18][subband][tab][ri];
#endif
#if NR_STATIONS >= 20
  float weight_19 = (*weights)[19][subband][tab][ri];
#endif
#if NR_STATIONS >= 21
  float weight_20 = (*weights)[20][subband][tab][ri];
#endif
#if NR_STATIONS >= 22
  float weight_21 = (*weights)[21][subband][tab][ri];
#endif
#if NR_STATIONS >= 23
  float weight_22 = (*weights)[22][subband][tab][ri];
#endif
#if NR_STATIONS >= 24
  float weight_23 = (*weights)[23][subband][tab][ri];
#endif
#if NR_STATIONS >= 25
  float weight_24 = (*weights)[24][subband][tab][ri];
#endif
#if NR_STATIONS >= 26
  float weight_25 = (*weights)[25][subband][tab][ri];
#endif
#if NR_STATIONS >= 27
  float weight_26 = (*weights)[26][subband][tab][ri];
#endif
#if NR_STATIONS >= 28
  float weight_27 = (*weights)[27][subband][tab][ri];
#endif
#if NR_STATIONS >= 29
  float weight_28 = (*weights)[28][subband][tab][ri];
#endif
#if NR_STATIONS >= 30
  float weight_29 = (*weights)[29][subband][tab][ri];
#endif
#if NR_STATIONS >= 31
  float weight_30 = (*weights)[30][subband][tab][ri];
#endif
#if NR_STATIONS >= 32
  float weight_31 = (*weights)[31][subband][tab][ri];
#endif
#if NR_STATIONS >= 33
  float weight_32 = (*weights)[32][subband][tab][ri];
#endif
#if NR_STATIONS >= 34
  float weight_33 = (*weights)[33][subband][tab][ri];
#endif
#if NR_STATIONS >= 35
  float weight_34 = (*weights)[34][subband][tab][ri];
#endif
#if NR_STATIONS >= 36
  float weight_35 = (*weights)[35][subband][tab][ri];
#endif
#if NR_STATIONS >= 37
  float weight_36 = (*weights)[36][subband][tab][ri];
#endif
#if NR_STATIONS >= 38
  float weight_37 = (*weights)[37][subband][tab][ri];
#endif
#if NR_STATIONS >= 39
  float weight_38 = (*weights)[38][subband][tab][ri];
#endif
#if NR_STATIONS >= 40
  float weight_39 = (*weights)[39][subband][tab][ri];
#endif
#if NR_STATIONS >= 41
  float weight_40 = (*weights)[40][subband][tab][ri];
#endif
#if NR_STATIONS >= 42
  float weight_41 = (*weights)[41][subband][tab][ri];
#endif
#if NR_STATIONS >= 43
  float weight_42 = (*weights)[42][subband][tab][ri];
#endif
#if NR_STATIONS >= 44
  float weight_43 = (*weights)[43][subband][tab][ri];
#endif
#if NR_STATIONS >= 45
  float weight_44 = (*weights)[44][subband][tab][ri];
#endif
#if NR_STATIONS >= 46
  float weight_45 = (*weights)[45][subband][tab][ri];
#endif
#if NR_STATIONS >= 47
  float weight_46 = (*weights)[46][subband][tab][ri];
#endif
#if NR_STATIONS >= 48
  float weight_47 = (*weights)[47][subband][tab][ri];
#endif

  for (uint time = 0; time < NR_TIMES_PER_BLOCK + NR_STATION_FILTER_TAPS - 1; time += 8) {
    for (uint i = get_local_id(0) + NR_POLARIZATIONS * 2 * get_local_id(1); i < NR_STATIONS * 8 * NR_POLARIZATIONS; i += NR_TABS * NR_POLARIZATIONS * 2) {
      uint p = i % NR_POLARIZATIONS;
      uint t = (i / NR_POLARIZATIONS) % 8;
      uint s = i / NR_POLARIZATIONS / 8;

      if (time + t < NR_TIMES_PER_BLOCK + NR_STATION_FILTER_TAPS - 1)
        local_samples[0][0][i] = convert_float2((*samples)[s][subband][time + t][p]);
    }

    barrier(CLK_LOCAL_MEM_FENCE);

    for (uint t = 0; t < min(8U, (NR_TIMES_PER_BLOCK + NR_STATION_FILTER_TAPS - 1 - time)); t++) {
      float2 sum = 0;

#if NR_STATIONS >= 1
      sample = local_samples[ 0][t][pol];
      sum += weight_00 * sample;
#endif

#if NR_STATIONS >= 2
      sample = local_samples[ 1][t][pol];
      sum += weight_01 * sample;
#endif

#if NR_STATIONS >= 3
      sample = local_samples[ 2][t][pol];
      sum += weight_02 * sample;
#endif

#if NR_STATIONS >= 4
      sample = local_samples[ 3][t][pol];
      sum += weight_03 * sample;
#endif

#if NR_STATIONS >= 5
      sample = local_samples[ 4][t][pol];
      sum += weight_04 * sample;
#endif

#if NR_STATIONS >= 6
      sample = local_samples[ 5][t][pol];
      sum += weight_05 * sample;
#endif

#if NR_STATIONS >= 7
      sample = local_samples[ 6][t][pol];
      sum += weight_06 * sample;
#endif

#if NR_STATIONS >= 8
      sample = local_samples[ 7][t][pol];
      sum += weight_07 * sample;
#endif

#if NR_STATIONS >= 9
      sample = local_samples[ 8][t][pol];
      sum += weight_08 * sample;
#endif

#if NR_STATIONS >= 10
      sample = local_samples[ 9][t][pol];
      sum += weight_09 * sample;
#endif

#if NR_STATIONS >= 11
      sample = local_samples[10][t][pol];
      sum += weight_10 * sample;
#endif

#if NR_STATIONS >= 12
      sample = local_samples[11][t][pol];
      sum += weight_11 * sample;
#endif

#if NR_STATIONS >= 13
      sample = local_samples[12][t][pol];
      sum += weight_12 * sample;
#endif

#if NR_STATIONS >= 14
      sample = local_samples[13][t][pol];
      sum += weight_13 * sample;
#endif

#if NR_STATIONS >= 15
      sample = local_samples[14][t][pol];
      sum += weight_14 * sample;
#endif

#if NR_STATIONS >= 16
      sample = local_samples[15][t][pol];
      sum += weight_15 * sample;
#endif

#if NR_STATIONS >= 17
      sample = local_samples[16][t][pol];
      sum += weight_16 * sample;
#endif

#if NR_STATIONS >= 18
      sample = local_samples[17][t][pol];
      sum += weight_17 * sample;
#endif

#if NR_STATIONS >= 19
      sample = local_samples[18][t][pol];
      sum += weight_18 * sample;
#endif

#if NR_STATIONS >= 20
      sample = local_samples[19][t][pol];
      sum += weight_19 * sample;
#endif

#if NR_STATIONS >= 21
      sample = local_samples[20][t][pol];
      sum += weight_20 * sample;
#endif

#if NR_STATIONS >= 22
      sample = local_samples[21][t][pol];
      sum += weight_21 * sample;
#endif

#if NR_STATIONS >= 23
      sample = local_samples[22][t][pol];
      sum += weight_22 * sample;
#endif

#if NR_STATIONS >= 24
      sample = local_samples[23][t][pol];
      sum += weight_23 * sample;
#endif

#if NR_STATIONS >= 25
      sample = local_samples[24][t][pol];
      sum += weight_24 * sample;
#endif

#if NR_STATIONS >= 26
      sample = local_samples[25][t][pol];
      sum += weight_25 * sample;
#endif

#if NR_STATIONS >= 27
      sample = local_samples[26][t][pol];
      sum += weight_26 * sample;
#endif

#if NR_STATIONS >= 28
      sample = local_samples[27][t][pol];
      sum += weight_27 * sample;
#endif

#if NR_STATIONS >= 29
      sample = local_samples[28][t][pol];
      sum += weight_28 * sample;
#endif

#if NR_STATIONS >= 30
      sample = local_samples[29][t][pol];
      sum += weight_29 * sample;
#endif

#if NR_STATIONS >= 31
      sample = local_samples[30][t][pol];
      sum += weight_30 * sample;
#endif

#if NR_STATIONS >= 32
      sample = local_samples[31][t][pol];
      sum += weight_31 * sample;
#endif

#if NR_STATIONS >= 33
      sample = local_samples[32][t][pol];
      sum += weight_32 * sample;
#endif

#if NR_STATIONS >= 34
      sample = local_samples[33][t][pol];
      sum += weight_33 * sample;
#endif

#if NR_STATIONS >= 35
      sample = local_samples[34][t][pol];
      sum += weight_34 * sample;
#endif

#if NR_STATIONS >= 36
      sample = local_samples[35][t][pol];
      sum += weight_35 * sample;
#endif

#if NR_STATIONS >= 37
      sample = local_samples[36][t][pol];
      sum += weight_36 * sample;
#endif

#if NR_STATIONS >= 38
      sample = local_samples[37][t][pol];
      sum += weight_37 * sample;
#endif

#if NR_STATIONS >= 39
      sample = local_samples[38][t][pol];
      sum += weight_38 * sample;
#endif

#if NR_STATIONS >= 40
      sample = local_samples[39][t][pol];
      sum += weight_39 * sample;
#endif

#if NR_STATIONS >= 41
      sample = local_samples[40][t][pol];
      sum += weight_40 * sample;
#endif

#if NR_STATIONS >= 42
      sample = local_samples[41][t][pol];
      sum += weight_41 * sample;
#endif

#if NR_STATIONS >= 43
      sample = local_samples[42][t][pol];
      sum += weight_42 * sample;
#endif

#if NR_STATIONS >= 44
      sample = local_samples[43][t][pol];
      sum += weight_43 * sample;
#endif

#if NR_STATIONS >= 45
      sample = local_samples[44][t][pol];
      sum += weight_44 * sample;
#endif

#if NR_STATIONS >= 46
      sample = local_samples[45][t][pol];
      sum += weight_45 * sample;
#endif

#if NR_STATIONS >= 47
      sum += weight_46 * local_samples[46][t][pol];
#endif

#if NR_STATIONS >= 48
      sum += weight_47 * local_samples[47][t][pol];
#endif

#if 0
      if (ri != 0)
        local_tmp[tab][pol] = (float2) (-sum.y, sum.x);

      if (ri == 0)
        (*complexVoltages)[subband][time + t][tab][pol] = sum + local_tmp[tab][pol];
#else
      float2 other_sum;
      asm ("shfl.down.b32 %0, %1, 1, 0x1F;" : "=r" (other_sum.x) : "r" (sum.x));
      asm ("shfl.down.b32 %0, %1, 1, 0x1F;" : "=r" (other_sum.y) : "r" (sum.y));
      if (ri == 0)
        (*complexVoltages)[subband][time + t][tab][pol] = sum + (float2) (-other_sum.y, other_sum.x);
#endif
    }

    barrier(CLK_LOCAL_MEM_FENCE);
  }
}
